import re
import psycopg2
import time
import datetime
from pymisp import PyMISP

# Паттерны OWASP top 10 для определения типа уязвимости
patterns = {
    "Broken Access Control": [r"access", r"permissions", r"unauthorized"],
    "Cryptographic Failures": [r"crypto", r"encryption", r"ssl", r"tls"],
    "Injection": [r"injection", r"sql", r"xss", r"cross-site"],
    "Insecure Design": [r"design flaw", r"misconfiguration"],
    "Vulnerable and Outdated Components": [r"vulnerable version", r"outdated", r"obsolete"],
    "Identification and Authentication Failures": [r"password", r"authentication", r"credential"],
    "Software and Data Integrity Failures": [r"tampering", r"integrity", r"corruption"],
    "Security Logging and Monitoring Failures": [r"logging", r"monitoring", r"audit"],
    "Server-Side Request Forgery (SSRF)": [r"ssrf", r"server-side request forgery"]
}

class Vulnerability:
    def __init__(self, event_id, category, type, value):
        self.event_id = event_id
        self.category = category
        self.type = type
        self.value = value

    def __str__(self):
        return f"Event ID: {self.event_id}, Category: {self.category}, Type: {self.type}, Value: {self.value}"


class MispOwaspConnector:
    def __init__(self, url, key, dbname, dbuser, dbpassword, dbhost, dbport):
        self.misp = PyMISP(url, key, ssl=False)
        self.conn = psycopg2.connect(
            dbname=dbname,
            user=dbuser,
            password=dbpassword,
            host=dbhost,
            port=dbport
        )
        self.cursor = self.conn.cursor()
        self.create_vulnerabilities_table()
        print("Connected to MISP, connected to Postgres")

    def create_vulnerabilities_table(self):
        self.cursor.execute('''
            CREATE TABLE IF NOT EXISTS vulnerabilities (
                event_id INT,
                category TEXT,
                type TEXT,
                value TEXT,
                scan_time TIMESTAMP
            )
        ''')
        self.conn.commit()

    def save_vulnerability(self, vulnerability):
        self.cursor.execute('''
            INSERT INTO vulnerabilities (event_id, category, type, value, scan_time)
            VALUES (%s, %s, %s, %s, %s)
        ''', (vulnerability.event_id, vulnerability.category, vulnerability.type, vulnerability.value, datetime.now()))
        self.conn.commit()

    def determine_vulnerability_type(self, attribute_value, patterns):
        for vuln_type, regex_patterns in patterns.items():
            for pattern in regex_patterns:
                if re.search(pattern, attribute_value, re.IGNORECASE):
                    return vuln_type
        return "Unknown"

    def search_and_save_vulnerabilities(self, patterns):
        attributes = self.misp.search(controller='attributes', pythonify=True)
        print("Started searching vulnerabilities")
        for attribute in attributes:
            vuln_type = self.determine_vulnerability_type(attribute.value, patterns)
            if vuln_type != "Unknown":
                vulnerability = Vulnerability(attribute.event_id, attribute.category, vuln_type, attribute.value)
                print("FOUND ONE: "+ vulnerability)
                self.save_vulnerability(vulnerability)

    def close(self):
        self.cursor.close()
        self.conn.close()

    def display_vulnerabilities(self):
        self.cursor.execute('SELECT * FROM vulnerabilities')
        records = self.cursor.fetchall()

        print("Vulnerabilities found:")
        for record in records:
            print(", ".join(map(str, record)))

# Использование модуля
if __name__ == "__main__":
    url = "http://localhost"
    key = "11324345645746545635256634563656wevmkreq"
    time.sleep(480)
    connector = MispOwaspConnector(url, key, "BAS_system", "postgres", "password", "db", "5432")
    connector.search_and_save_vulnerabilities(patterns)
    connector.display_vulnerabilities()
    connector.close()
     