import os
import nmap
import psycopg2

class NetworkScanner:
    """
    A class to handle network scanning and storing scan results in a PostgreSQL database.

    Attributes:
        db_conn (psycopg2.connect): Connection to the PostgreSQL database.
    """

    def __init__(self, db_host, db_name, db_user, db_pass):
        """
        Initializes the NetworkScanner with database connection details.

        Args:
            db_host (str): Host of the database.
            db_name (str): Name of the database.
            db_user (str): Username for the database.
            db_pass (str): Password for the database.
        """
        self.db_conn_str = f'dbname={db_name} user={db_user} password={db_pass} host={db_host}'
        self.db_conn = psycopg2.connect(self.db_conn_str)

    def create_tables(self):
        """Creates tables in the database for storing network scan and port service information."""
        cur = self.db_conn.cursor()
        cur.execute("""
            CREATE TABLE IF NOT EXISTS network_scan (
                id SERIAL PRIMARY KEY,
                ip_address VARCHAR(15),
                mac_address VARCHAR(17) UNIQUE,
                os VARCHAR(255),
                is_web_app BOOLEAN DEFAULT FALSE
            );
        """)
        cur.execute("""
            CREATE TABLE IF NOT EXISTS port_services (
                id SERIAL PRIMARY KEY,
                network_scan_id INTEGER,
                port INTEGER,
                protocol VARCHAR(10),
                service_name VARCHAR(255),
                service_version VARCHAR(255),
                FOREIGN KEY (network_scan_id) REFERENCES network_scan (id) ON DELETE CASCADE
            );
        """)
        self.db_conn.commit()

    def scan_subnet(self, subnet):
        """
        Scans a given subnet using Nmap.

        Args:
            subnet (str): The subnet to scan.

        Returns:
            nmap.PortScanner: The results of the Nmap scan.
        """
        nm = nmap.PortScanner()
        nm.scan(hosts=subnet, arguments='-sV -sU')
        return nm

    def parse_scan_results(self, scan_results):
        """
        Parses the scan results and yields information about each host in the subnet.

        Args:
            scan_results (nmap.PortScanner): The results from the Nmap scan.

        Yields:
            dict: A dictionary containing parsed information about each host.
        """
        for host in scan_results.all_hosts():
            is_web_app = False
            host_services = {}

            for protocol in ['tcp', 'udp']:
                for port in scan_results[host].get(protocol, {}):
                    service = scan_results[host][protocol][port]
                    host_services[port] = {
                        'protocol': protocol,
                        'name': service.get('name', ''),
                        'version': service.get('version', '')
                    }
                    if (port == 80 or port == 443) and 'http' in service.get('name', ''):
                        is_web_app = True

            yield {
                'ip': scan_results[host]['addresses'].get('ipv4', ''),
                'mac': scan_results[host]['addresses'].get('mac', ''),
                'os': scan_results[host].get('osclass', [{}])[0].get('osfamily', ''),
                'services': host_services,
                'is_web_app': is_web_app
            }

    def upsert_data(self, data):
        """
        Inserts or updates the network scan and port service data into the database.

        Args:
            data (iterable): An iterable containing data about network scans.
        """
        cur = self.db_conn.cursor()
        for record in data:
            cur.execute("""
                INSERT INTO network_scan (ip_address, mac_address, os, is_web_app)
                VALUES (%s, %s, %s, %s)
                ON CONFLICT (mac_address) DO UPDATE SET
                ip_address = EXCLUDED.ip_address,
                os = EXCLUDED.os,
                is_web_app = EXCLUDED.is_web_app
                RETURNING id;
            """, (record['ip'], record['mac'], record['os'], record['is_web_app']))
            network_scan_id = cur.fetchone()[0]

            self.upsert_port_services(network_scan_id, record['services'])
        self.db_conn.commit()

    def upsert_port_services(self, network_scan_id, services):
        """
        Inserts or updates port services data associated with a network scan in the database.

        Args:
            network_scan_id (int): The ID of the network scan.
            services (dict): A dictionary containing service information for each port.
        """
        cur = self.db_conn.cursor()
        for port, service_info in services.items():
            cur.execute("""
                INSERT INTO port_services (network_scan_id, port, protocol, service_name, service_version)
                VALUES (%s, %s, %s, %s, %s)
                ON CONFLICT (network_scan_id, port, protocol) DO UPDATE SET
                service_name = EXCLUDED.service_name,
                service_version = EXCLUDED.service_version;
            """, (network_scan_id, port, service_info['protocol'], service_info['name'], service_info['version']))
        self.db_conn.commit()

    def close_connection(self):
        """Closes the database connection."""
        self.db_conn.close()

    def print_endpoints(self):
        """
        Prints details of all network scans and associated port services from the database.
        """
        cur = self.db_conn.cursor()
        cur.execute("SELECT * FROM network_scan;")
        network_scans = cur.fetchall()

        for ns in network_scans:
            print(f"Network Scan ID: {ns[0]}, IP Address: {ns[1]}, MAC Address: {ns[2]}, OS: {ns[3]}, Is Web App: {'Yes' if ns[4] else 'No'}")
            cur.execute("SELECT port, protocol, service_name, service_version FROM port_services WHERE network_scan_id = %s;", (ns[0],))
            port_services = cur.fetchall()
            if port_services:
                print("  Port Services:")
                for ps in port_services:
                    print(f"    Port: {ps[0]}, Protocol: {ps[1]}, Service Name: {ps[2]}, Service Version: {ps[3]}")
            else:
                print("  No port services found for this network scan.")
            print("-" * 40)
        cur.close()

    def delete_network_scan_record(self, network_scan_id):
        """
        Deletes a network scan record and its associated port services from the database.

        Args:
            network_scan_id (int): The ID of the network scan to be deleted.
        """
        cur = self.db_conn.cursor()
        cur.execute("DELETE FROM network_scan WHERE id = %s;", (network_scan_id,))
        self.db_conn.commit()
        print(f"Record with ID {network_scan_id} deleted from network_scan and associated records from port_services.")
        cur.close()



def main(subnet):
    db_host = os.getenv('DB_HOST', 'localhost')
    db_name = os.getenv('DB_NAME', 'yourdb')
    db_user = os.getenv('DB_USER', 'youruser')
    db_pass = os.getenv('DB_PASS', 'yourpassword')

    scanner = NetworkScanner(db_host, db_name, db_user, db_pass)
    scanner.create_tables()
    scan_results = scanner.scan_subnet(subnet)
    data = scanner.parse_scan_results(scan_results)
    scanner.upsert_data(data)
    scanner.close_connection()

if __name__ == "__main__":
    subnet = '192.168.1.0/24'
    main(subnet)
