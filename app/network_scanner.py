"""Network scanner module
"""
import nmap
import netifaces
from database import get_db, Session
from fastapi import Depends
from models import Network, Port_services

class NetworkScanner:
    """
    A class to handle network scanning and storing scan results in a PostgreSQL database.
    """

    def __init__(self, database: Session = Depends(get_db)):
        self.database = database

    def scan_subnet(self, subnet):
        """
        Scans a given subnet using Nmap.

        Args:
            subnet (str): The subnet to scan.

        Returns:
            nmap.PortScanner: The results of the Nmap scan.
        """
        nm = nmap.PortScanner()
        nm.scan(hosts=subnet, arguments='-sV -sU')
        return nm

    def parse_scan_results(self, scan_results):
        """
        Parses the scan results and yields information about each host in the subnet.

        Args:
            scan_results (nmap.PortScanner): The results from the Nmap scan.

        Yields:
            dict: A dictionary containing parsed information about each host.
        """
        for host in scan_results.all_hosts():
            is_web_app = False
            host_services = {}
            
            for protocol in ['tcp', 'udp']:
                for port in scan_results[host].get(protocol, {}):
                    service = scan_results[host][protocol][port]
                    host_services[port] = {
                        'protocol': protocol,
                        'name': service.get('name', ''),
                        'version': service.get('version', '')
                    }
                    if (port == 80 or port == 443) and 'http' in service.get('name', ''):
                        is_web_app = True

            yield {
                'ip': scan_results[host]['addresses'].get('ipv4', ''),
                'mac': scan_results[host]['addresses'].get('mac', ''),
                'os': scan_results[host].get('osclass', [{}])[0].get('osfamily', ''),
                'services': host_services,
                'is_web_app': is_web_app
            }

    def upsert_data(self, data):
        """
        Inserts or updates the network scan and port service data into the database.

        Args:
            data (iterable): An iterable containing data about network scans.
        """
        for record in data:
            net = Network(ip_address = record['ip'], mac_address = record['mac'], os = record['os'], is_web_app = record['is_web_app'])
            self.database.add(net)
            network_scan_id = self.database.query(Network).count()
            self.upsert_port_services(network_scan_id, record['services'])
        self.database.commit()

    def upsert_port_services(self, scan_id, services):
        """
        Inserts or updates port services data associated with a network scan in the database.

        Args:
            network_scan_id (int): The ID of the network scan.
            services (dict): A dictionary containing service information for each port.
        """
        for port, service_info in services.items():
            ports = Port_services(network_scan_id=scan_id, port=port, protocol=service_info['protocol'], service_name=service_info['name'], service_version=service_info['version'])
            self.database.add(ports)
        self.database.commit()

    def delete_network_scan_record(self, network_scan_id):
        """
        Deletes a network scan record and its associated port services from the database.

        Args:
            network_scan_id (int): The ID of the network scan to be deleted.
        """
        net = self.database.query(Network).filter(Network.id == network_scan_id).first()
        self.database.delete(net)

    def delete_all_network_scan_records(self):
        """
        Deletes all network scan records and their associated port services from the database.
        """
        all_network_scans = self.database.query(Network).all()
        for net in all_network_scans:
            self.database.delete(net)
        self.database.commit()


    def get_local_subnets(self):
        """
        Retrieves the local subnets based on network interfaces on the device.

        Returns:
            list: A list of local subnets.
        """
        subnets = []
        print(netifaces.interfaces())
        for interface in netifaces.interfaces():
            addrs = netifaces.ifaddresses(interface)
            if netifaces.AF_INET in addrs:
                print(addrs)
                for addr in addrs[netifaces.AF_INET]:
                    ip = addr['addr']
                    netmask = addr['netmask']
                    subnets.append(f"{ip}")
        return subnets

def main():
    scanner = NetworkScanner()

    subnets = scanner.get_local_subnets()
    for subnet in subnets:
        print(f"Scanning subnet: {subnet}")
        scan_results = scanner.scan_subnet(subnet)
        data = scanner.parse_scan_results(scan_results)
        scanner.upsert_data(data)

if __name__ == "__main__":
    main()
